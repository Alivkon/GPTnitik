"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import is_admin, read_prompt, write_prompt, reset_prompt

logger = logging.getLogger(__name__)

async def cmd_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /prompt - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        current_prompt = read_prompt()
        
        message = f"üìù **–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n\n```\n{current_prompt}\n```"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /prompt: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")

async def cmd_setprompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /setprompt - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprompt –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞...
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/setprompt –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞...`",
            parse_mode='Markdown'
        )
        return
    
    new_prompt = ' '.join(context.args)
    
    if len(new_prompt.strip()) < 10:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    if len(new_prompt) > 2000:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    try:
        success = write_prompt(new_prompt)
        
        if success:
            await update.message.reply_text("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ–º–ø—Ç: {new_prompt[:50]}...")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setprompt: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")

async def cmd_resetprompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /resetprompt - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        success = reset_prompt()
        
        if success:
            await update.message.reply_text("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resetprompt: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞.")

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from config import DEBUG_SEND_VOICE, ADMIN_IDS, MAX_MESSAGES_PER_SESSION, SESSION_DURATION_MINUTES
        from utils import TEMP_DIR
        import os
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_files_count = len(list(TEMP_DIR.glob('*'))) if TEMP_DIR.exists() else 0
        
        # –†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        temp_dir_size = 0
        if TEMP_DIR.exists():
            for file_path in TEMP_DIR.rglob('*'):
                if file_path.is_file():
                    temp_dir_size += file_path.stat().st_size
        
        temp_dir_size_mb = temp_dir_size / (1024 * 1024)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        try:
            from user_limits import user_limit_manager
            blocked_count = user_limit_manager.get_blocked_users_count()
        except Exception:
            blocked_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
        try:
            from config import get_current_max_tokens
            current_tokens = get_current_max_tokens()
        except Exception:
            current_tokens = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        stats_message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ DEBUG_SEND_VOICE: {DEBUG_SEND_VOICE}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len([aid for aid in ADMIN_IDS if aid != 0])}

‚è±Ô∏è **–õ–∏–º–∏—Ç—ã —Å–µ—Å—Å–∏–π:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: {MAX_MESSAGES_PER_SESSION}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {SESSION_DURATION_MINUTES} –º–∏–Ω—É—Ç

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT:**
‚Ä¢ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {current_tokens}

üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {blocked_count}

üìÅ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {temp_files_count}
‚Ä¢ –†–∞–∑–º–µ—Ä: {temp_dir_size_mb:.2f} MB

üìù **–ü—Ä–æ–º–ø—Ç:**
‚Ä¢ –î–ª–∏–Ω–∞: {len(read_prompt())} —Å–∏–º–≤–æ–ª–æ–≤
"""
        
        await update.message.reply_text(
            stats_message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def cmd_cleanup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /cleanup - –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from utils import cleanup_old_temp_files
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        cleanup_old_temp_files(max_age_hours=1)
        
        await update.message.reply_text("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã.")
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cleanup: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.")

async def cmd_blocked_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /blocked - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from user_limits import user_limit_manager
        
        blocked_users = user_limit_manager.get_blocked_users_info()
        
        if not blocked_users:
            await update.message.reply_text("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return
        
        message = f"üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(blocked_users)}):**\n\n"
        
        for user_info in blocked_users[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            user_display = f"ID: {user_info['user_id']}"
            if user_info['first_name']:
                user_display += f" ({user_info['first_name']}"
                if user_info['username']:
                    user_display += f" @{user_info['username']}"
                user_display += ")"
            elif user_info['username']:
                user_display += f" (@{user_info['username']})"
            
            blocked_date = user_info['blocked_at'].strftime("%d.%m.%Y %H:%M")
            
            message += f"‚Ä¢ {user_display}\n"
            message += f"  üìÖ {blocked_date}\n"
            message += f"  üìù {user_info['reason']}\n"
            message += f"  üí¨ {user_info['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π, {user_info['session_duration']} –º–∏–Ω\n\n"
        
        if len(blocked_users) > 10:
            message += f"... –∏ –µ—â—ë {len(blocked_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /blocked: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def cmd_unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /unblock - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock USER_ID
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unblock USER_ID`",
            parse_mode='Markdown'
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        from user_limits import user_limit_manager
        
        if not user_limit_manager.is_user_blocked(target_user_id):
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        success = user_limit_manager.unblock_user(target_user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")
        
    except Exception as e:
        logger.error(f"ÔøΩÔøΩ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unblock: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def cmd_block_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /block - –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block USER_ID [–ø—Ä–∏—á–∏–Ω–∞]
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/block USER_ID [–ø—Ä–∏—á–∏–Ω–∞]`",
            parse_mode='Markdown'
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    reason = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    if len(context.args) > 1:
        reason = ' '.join(context.args[1:])
    
    try:
        from user_limits import user_limit_manager
        
        if user_limit_manager.is_user_blocked(target_user_id):
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        success = user_limit_manager.block_user(
            user_id=target_user_id,
            reason=reason
        )
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /block: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def cmd_cleanup_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /cleanup_blocks - —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cleanup_blocks [–¥–Ω–∏] (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days_old = 30
    if context.args:
        try:
            days_old = int(context.args[0])
            if days_old < 1:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")
            return
    
    try:
        from user_limits import user_limit_manager
        
        removed_count = user_limit_manager.cleanup_old_blocks(days_old)
        
        await update.message.reply_text(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)."
        )
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª {removed_count} —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cleanup_blocks: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.")

async def cmd_limits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /limits - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫ÔøΩÔøΩ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from config import get_current_limits
        
        max_messages, session_duration = get_current_limits()
        
        message = f"""‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**

üí¨ **–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ—Å—Å–∏—é:** {max_messages}
‚è±Ô∏è **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:** {session_duration} –º–∏–Ω—É—Ç

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ `/setlimits –°–û–û–ë–©–ï–ù–ò–Ø –ú–ò–ù–£–¢–´`
‚Ä¢ `/resetlimits` - —Å–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limits: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.")

async def cmd_setlimits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /setlimits - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimits –°–û–û–ë–©–ï–ù–ò–Ø –ú–ò–ù–£–¢–´
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ÔøΩÔøΩ–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/setlimits –°–û–û–ë–©–ï–ù–ò–Ø –ú–ò–ù–£–¢–´`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/setlimits 5 20`",
            parse_mode='Markdown'
        )
        return
    
    try:
        max_messages = int(context.args[0])
        session_duration = int(context.args[1])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if max_messages < 1 or max_messages > 100:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            return
        
        if session_duration < 1 or session_duration > 1440:  # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
            await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞).")
            return
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ãÔøΩÔøΩ –∑–Ω–∞—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
        return
    
    try:
        from config import write_limits
        
        success = write_limits(max_messages, session_duration)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"üí¨ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: {max_messages}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration} –º–∏–Ω—É—Ç"
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–Ω–æ–≤–∏–ª –ª–∏–º–∏—Ç—ã: {max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {session_duration} –º–∏–Ω—É—Ç")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setlimits: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.")

async def cmd_resetlimits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /resetlimits - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from config import reset_limits, get_current_limits
        
        success = reset_limits()
        
        if success:
            max_messages, session_duration = get_current_limits()
            await update.message.reply_text(
                f"‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                f"üí¨ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: {max_messages}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration} –º–∏–Ω—É—Ç"
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª –ª–∏–º–∏—Ç—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resetlimits: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤.")

async def cmd_clear_all_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /clearblocks - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤ 00:00)
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from user_limits import user_limit_manager
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
        blocked_count_before = user_limit_manager.get_blocked_users_count()
        
        if blocked_count_before == 0:
            await update.message.reply_text(
                "‚ÑπÔ∏è **–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                "–°–ø–∏—Å–æ–∫ —É–∂–µ –ø—É—Å—Ç."
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        cleared_count = user_limit_manager.clear_all_blocks()
        
        await update.message.reply_text(
            f"üïõ **–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫**\n\n"
            f"‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{cleared_count}**\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {cleared_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {str(e)}")

async def cmd_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /tokens - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from config import get_current_max_tokens
        import os
        
        current_tokens = get_current_max_tokens()
        default_tokens = int(os.getenv('MAX_TOKENS', 500))
        
        message = f"""üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ GPT:**

üéØ **–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:** {current_tokens} —Ç–æ–∫–µ–Ω–æ–≤
üìã **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:** {default_tokens} —Ç–æ–∫–µ–Ω–æ–≤

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –¢–æ–∫–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ GPT
‚Ä¢ –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ú–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ `/settokens –ö–û–õ–ò–ß–ï–°–¢–í–û` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
‚Ä¢ `/resettokens` - —Å–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tokens: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö.")

async def cmd_settokens(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /settokens - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settokens –ö–û–õ–ò–ß–ï–°–¢–í–û
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/settokens –ö–û–õ–ò–ß–ï–°–¢–í–û`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/settokens 800`",
            parse_mode='Markdown'
        )
        return
    
    try:
        max_tokens = int(context.args[0])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if max_tokens < 50:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 50")
            return
        
        if max_tokens > 4000:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 4000")
            return
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
        return
    
    try:
        from config import write_max_tokens
        
        success = write_max_tokens(max_tokens)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ **–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:**\n\n"
                f"üéØ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: **{max_tokens} —Ç–æ–∫–µ–Ω–æ–≤**\n\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT.",
                parse_mode='Markdown'
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {max_tokens}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settokens: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.")

async def cmd_resettokens(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /resettokens - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from config import reset_max_tokens, get_current_max_tokens
        import os
        
        success = reset_max_tokens()
        
        if success:
            current_tokens = get_current_max_tokens()
            default_tokens = int(os.getenv('MAX_TOKENS', 500))
            
            await update.message.reply_text(
                f"‚úÖ **–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n\n"
                f"üéØ –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: **{current_tokens} —Ç–æ–∫–µ–Ω–æ–≤**\n"
                f"üìã –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **{default_tokens} —Ç–æ–∫–µ–Ω–æ–≤**\n\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT.",
                parse_mode='Markdown'
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resettokens: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.")