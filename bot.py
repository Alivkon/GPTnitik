"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´–ò–∑–ª–∏–≤–∞–Ω–∏–µ –¥—É—à–∏¬ª
"""
import asyncio
import logging
from pathlib import Path
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ConversationHandler,
    ContextTypes,
    filters
)
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('session.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('openai').setLevel(logging.WARNING)
logging.getLogger('openai._base_client').setLevel(logging.WARNING)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import TELEGRAM_TOKEN, MAX_MESSAGES_PER_SESSION, SESSION_DURATION_MINUTES
from utils import SessionTimer, send_to_admins, log_session, cleanup_old_temp_files, create_temp_file, cleanup_temp_file
from stt import speech_to_text, get_audio_duration
from gpt import get_gpt_response, validate_user_input
from tts import text_to_speech, prepare_text_for_tts
from admin import cmd_prompt, cmd_setprompt, cmd_resetprompt, cmd_stats, cmd_cleanup

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
AWAIT_NAME, MAIN_MENU, RECORDING = range(3)

class PsychologyBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        logger.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name}) –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é")
        logger.debug(f"[START] Update: {update}")
        logger.debug(f"[START] Chat ID: {update.effective_chat.id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        context.user_data['user_id'] = user_id
        context.user_data['start_time'] = datetime.now()
        context.user_data['timer'] = SessionTimer()
        context.user_data['message_count'] = 0
        context.user_data['name'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        cleanup_old_temp_files()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–Ω—ã—Ç—å, –Ω–µ –±–æ—è—Å—å –æ—Å—É–∂–¥–µ–Ω–∏—è. "
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.\n\n"
            "–ö–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–∏–º—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [KeyboardButton("–í–≤–µ—Å—Ç–∏ –∏–º—è")],
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        
        return AWAIT_NAME
    
    async def handle_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        message_text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"[NAME_INPUT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª: '{message_text}'")
        
        if message_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            logger.info(f"[NAME_INPUT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
            context.user_data['name'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            try:
                await update.message.reply_text(
                    "–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üòä",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.info(f"[NAME_INPUT] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"[NAME_INPUT] –û—à–∏–±–∫–∞ —É–±–∏—Ä–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return await self.show_main_menu(update, context)
        elif message_text == "–í–≤–µ—Å—Ç–∏ –∏–º—è":
            logger.info(f"[NAME_INPUT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–≤–µ—Å—Ç–∏ –∏–º—è")
            try:
                await update.message.reply_text(
                    "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.info(f"[NAME_INPUT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[NAME_INPUT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return AWAIT_NAME
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è
            name = message_text.strip()
            if len(name) > 50:
                name = name[:50]
            if len(name) < 1:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            logger.info(f"[NAME_INPUT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–º—è: '{name}'")
            context.user_data['name'] = name
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            try:
                await update.message.reply_text(
                    f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.info(f"[NAME_INPUT] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"[NAME_INPUT] –û—à–∏–±–∫–∞ —É–±–∏—Ä–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return await self.show_main_menu(update, context)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –∫ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        name = context.user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        logger.info(f"[MAIN_MENU] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–º—è: {name})")
        
        try:
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üéô\n\n"
                "üéô –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á—ë–∫ '–º–∏–∫—Ä–æ—Ñ–æ–Ω' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ... (–æ—Ç–ø—É—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: 7 –º–∏–Ω—É—Ç",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"[MAIN_MENU] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"[MAIN_MENU] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return RECORDING
    
    async def start_recording(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä —Å–µ—Å—Å–∏–∏
        timer = context.user_data.get('timer')
        if timer and timer.is_expired():
            return await self.end_session(update, context)
        
        await update.message.reply_text(
            "üéô –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á—ë–∫ '–º–∏–∫—Ä–æ—Ñ–æ–Ω' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ... (–æ—Ç–ø—É—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: 7 –º–∏–Ω—É—Ç",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return RECORDING
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_name = context.user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        logger.info(f"[VOICE] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä —Å–µ—Å—Å–∏–∏
        timer = context.user_data.get('timer')
        if timer and timer.is_expired():
            logger.info(f"[VOICE] –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º")
            return await self.end_session(update, context)
        
        voice_file = None
        wav_file = None
        tts_file = None
        
        try:
            logger.info(f"[VOICE] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é "–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="record_voice")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice = update.message.voice
            duration_seconds = voice.duration
            
            logger.info(f"[VOICE] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {duration_seconds} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if duration_seconds > 420:  # 7 –º–∏–Ω—É—Ç
                logger.warning(f"[VOICE] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration_seconds} —Å–µ–∫")
                await update.message.reply_text(
                    f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration_seconds//60}:{duration_seconds%60:02d}). "
                    "–ú–∞–∫—Å–∏–º—É–º 7 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–æ—Ä–æ—á–µ."
                )
                return RECORDING
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            voice_file = create_temp_file('.ogg')
            logger.info(f"[VOICE] –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –≤ {voice_file}")
            
            file = await context.bot.get_file(voice.file_id)
            await file.download_to_drive(voice_file)
            
            logger.info(f"[VOICE] –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {voice_file.stat().st_size} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω DEBUG)
            logger.debug(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            await send_to_admins(
                context.bot, 
                "Voice (user)", 
                voice_file=voice_file,
                user_name=user_name
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç"
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
            logger.info(f"[VOICE] –ù–∞—á–∏–Ω–∞–µ–º STT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
                if not voice_file or not voice_file.exists():
                    raise ValueError("–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = voice_file.stat().st_size
                if file_size == 0:
                    raise ValueError("–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å STT
                try:
                    user_text = await speech_to_text(voice_file)
                except ConnectionError:
                    raise ValueError("–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except Exception as stt_error:
                    logger.error(f"[VOICE] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ STT: {stt_error}")
                    raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if not user_text or len(user_text.strip()) == 0:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç—á–µ.")
                
                logger.info(f"[VOICE] STT —É—Å–ø–µ—à–Ω–æ: '{user_text[:100]}...' (–¥–ª–∏–Ω–∞: {len(user_text)})")
                
            except ValueError as e:
                error_msg = str(e)
                logger.error(f"[VOICE] –û—à–∏–±–∫–∞ STT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                user_msg = f"‚ùå {error_msg}"
                try:
                    await update.message.reply_text(user_msg)
                except Exception as send_error:
                    logger.error(f"[VOICE] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
                
                return RECORDING
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if not validate_user_input(user_text):
                logger.warning(f"[VOICE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_text}'")
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ."
                )
                return RECORDING
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            logger.debug(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            await send_to_admins(
                context.bot, 
                "STT", 
                content=user_text,
                user_name=user_name
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é "–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            logger.info(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                gpt_response = await get_gpt_response(user_text, user_name)
                logger.info(f"[VOICE] GPT –æ—Ç–≤ÔøΩÔøΩ—Ç –ø–æ–ª—É—á–µ–Ω: '{gpt_response[:100]}...' (–¥–ª–∏–Ω–∞: {len(gpt_response)})")
            except ValueError as e:
                logger.error(f"[VOICE] –û—à–∏–±–∫–∞ GPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await update.message.reply_text(f"‚ùå {str(e)}")
                return RECORDING
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            logger.debug(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            await send_to_admins(
                context.bot, 
                "GPT", 
                content=gpt_response,
                user_name=user_name
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é "–æ–∑–≤—É—á–∏–≤–∞–µ—Ç"
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="record_voice")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ä–µ—á—å
            logger.info(f"[VOICE] –ù–∞—á–∏–Ω–∞–µ–º TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                prepared_text = prepare_text_for_tts(gpt_response)
                tts_file = await text_to_speech(prepared_text)
                logger.info(f"[VOICE] TTS —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {tts_file}")
            except ValueError as e:
                logger.error(f"[VOICE] –û—à–∏–±–∫–∞ TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                # –ï—Å–ª–∏ TTS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                await update.message.reply_text(f"üí¨ {gpt_response}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {str(e)}")
                return await self.continue_or_end(update, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            try:
                with open(tts_file, 'rb') as audio:
                    await context.bot.send_voice(
                        chat_id=update.effective_chat.id,
                        voice=audio
                    )
                logger.info(f"[VOICE] –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[VOICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ fallback
                await update.message.reply_text(f"üí¨ {gpt_response}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (ÔøΩÔøΩ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω DEBUG)
            logger.debug(f"[VOICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            await send_to_admins(
                context.bot, 
                "Voice (bot)", 
                voice_file=tts_file,
                user_name=user_name
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            context.user_data['message_count'] = context.user_data.get('message_count', 0) + 1
            logger.info(f"[VOICE] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–æ–±—â–µ–Ω–∏–π: {context.user_data['message_count']}")
            
            return await self.continue_or_end(update, context)
            
        except Exception as e:
            logger.error(f"[VOICE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            try:
                await update.message.reply_text(
                    "‚ùå –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
                )
            except Exception as send_error:
                logger.error(f"[VOICE] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")
            return RECORDING
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            logger.debug(f"[VOICE] –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            for temp_file in [voice_file, wav_file, tts_file]:
                if temp_file:
                    cleanup_temp_file(temp_file)
    
    async def continue_or_end(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        timer = context.user_data.get('timer')
        message_count = context.user_data.get('message_count', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
        if timer and timer.is_expired():
            return await self.end_session(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if message_count >= MAX_MESSAGES_PER_SESSION:
            await update.message.reply_text(
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ({MAX_MESSAGES_PER_SESSION}) –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏. "
                "–°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
            return await self.end_session(update, context)
        
        await update.message.reply_text(
            "–•–æ—á–µ—à—å –µ—â—ë —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?\n\n"
            "üéô –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á—ë–∫ '–º–∏–∫—Ä–æ—Ñ–æ–Ω' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ... (–æ—Ç–ø—É—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: 7 –º–∏–Ω—É—Ç\n"
            f"–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–µ –±–æ–ª–µ–µ {SESSION_DURATION_MINUTES} –º–∏–Ω—É—Ç",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return RECORDING
    
    async def end_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        timer = context.user_data.get('timer')
        user_name = context.user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        message_count = context.user_data.get('message_count', 0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        if timer:
            duration = timer.elapsed_time()
            log_session(user_name, duration, message_count)
        
        # –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –º–Ω–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏. üíô\n\n"
            "–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –æ–¥–∏–Ω, –∏ —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –µ—â—ë ‚Äî —è –∑–¥–µ—Å—å.",
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
    
    async def handle_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞'"""
        return await self.start_command(update, context)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text
        user_id = update.effective_user.id
        current_state = context.user_data.get('current_state', 'UNKNOWN')
        
        logger.info(f"[TEXT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: '{message_text}' (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state})")
        
        if message_text == "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞":
            logger.info(f"[TEXT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞'")
            return await self.handle_restart(update, context)
        else:
            logger.info(f"[TEXT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
            try:
                await update.message.reply_text(
                    "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á—ë–∫ '–º–∏–∫—Ä–æ—Ñ–æ–Ω' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ."
                )
                logger.info(f"[TEXT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[TEXT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return MAIN_MENU
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        await update.message.reply_text(
            "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û—Å–Ω–æ–≤–Ω–æ–π conversation handler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self.start_command),
                MessageHandler(filters.Regex('^–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞$'), self.handle_restart)
            ],
            states={
                AWAIT_NAME: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, 
                        self.handle_name_input
                    )
                ],
                MAIN_MENU: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, 
                        self.handle_text_message
                    )
                ],
                RECORDING: [
                    MessageHandler(
                        filters.VOICE, 
                        self.handle_voice_message
                    ),
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, 
                        self.handle_text_message
                    )
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_command),
                CommandHandler('start', self.start_command)
            ]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º conversation handler
        self.application.add_handler(conv_handler)
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler('prompt', cmd_prompt))
        self.application.add_handler(CommandHandler('setprompt', cmd_setprompt))
        self.application.add_handler(CommandHandler('resetprompt', cmd_resetprompt))
        self.application.add_handler(CommandHandler('stats', cmd_stats))
        self.application.add_handler(CommandHandler('cleanup', cmd_cleanup))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await self.application.initialize()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.start()
            await self.application.updater.start_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while True:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = PsychologyBot()
    await bot.run()

if __name__ == '__main__':
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
        try:
            loop = asyncio.get_running_loop()
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task
            task = loop.create_task(main())
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            import concurrent.futures
            
            def run_in_thread():
                new_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(new_loop)
                try:
                    new_loop.run_until_complete(main())
                finally:
                    new_loop.close()
            
            thread = threading.Thread(target=run_in_thread)
            thread.start()
            thread.join()
            
        except RuntimeError:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise